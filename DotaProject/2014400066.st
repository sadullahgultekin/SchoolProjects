Object subclass: #Dota	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Dota commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Dota subclass: #GameArena	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!GameArena commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameArena class	instanceVariableNames: 'player1 player2'!!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:07'!selectHero: playerone otherPlayer: playertwo|choice scourgeList sentinelList|scourgeList := Scourge subclasses.sentinelList := Sentinel subclasses."first player will chose a hero,if the player clicks cancel, he will be asked again"choice := 0.[choice == 0]whileTrue:[	choice := UIManager default chooseFrom: scourgeList message: 'Choose a hero from Scourge list for Player 1'.].playerone hero: (scourgeList at: choice) createInstance. "second player will chose a hero,if the player clicks cancel, he will be asked again"choice := 0.[choice == 0]whileTrue:[	choice := UIManager default chooseFrom: sentinelList message: 'Choose a hero from Sentinel list for Player 2'.].playertwo hero: (sentinelList at: choice) createInstance. ! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:04'!skill: playerAttackChoice from: playerone to: playertwo|damage rand|damage := 0."if the skill used is fireblast, the percentage of multicast is calculated and damage is determined"(playerAttackChoice isMemberOf: FireBlast)ifTrue: [	damage := 220.	(playerone hero) remainingMana: (((playerone hero) remainingMana) - 225).	rand := ((1 to: 100) atRandom)..	(rand < 13)	ifTrue:[damage := damage * 4]	ifFalse:[		(rand < 26)		ifTrue: [damage := damage * 3]		ifFalse: [			(rand < 61)			ifTrue: [damage := damage * 2]			].		].	].
"if the skill used is AnchorSmash, the oppenent will have AnchorSmash buff"(playerAttackChoice isMemberOf: AnchorSmash)ifTrue: [damage := 225. ((playertwo hero) allBuffs) add: 'AnchorSmash' -> 1. (playerone hero) remainingMana: (((playerone hero) remainingMana) - 60)]."if the skill used is GodsStrength, the oppenent will have GodsStrength buff"(playerAttackChoice isMemberOf: GodsStrength)ifTrue: [((playerone hero) allBuffs) add: 'GodsStrength' -> 3. (playerone hero) remainingMana: (((playerone hero) remainingMana) - 200)].	"if the skill used is EnchantTotem, the oppenent will have EnchantTotem buff"(playerAttackChoice isMemberOf: EnchantTotem)ifTrue: [((playerone hero) allBuffs) add: 'EnchantTotem' -> 1. (playerone hero) remainingMana: (((playerone hero) remainingMana) - 50)].	"if the skill used is ManaBurn, opponent's mana is decreased"(playerAttackChoice isMemberOf: ManaBurn)ifTrue: [(playertwo hero) remainingMana: (((playertwo remainingMana) * 4) / 5). (playerone hero) remainingMana: (((playerone hero) remainingMana) - 50)].	"if the skill used is SacredArrow, the effects of SacredArrow is given"(playerAttackChoice isMemberOf: SacredArrow)ifTrue: [((0 to: 100) atRandom) < 75 ifTrue: [damage := 320]. (playerone hero) remainingMana: (((playerone hero) remainingMana) - 100)].	"if the skill used is ManaVoid, the effects of ManaVoid is given"(playerAttackChoice isMemberOf: ManaVoid)ifTrue: [damage := ((((playertwo hero) maxMana) - ((playertwo hero) remainingMana)) * 1.1). (playerone hero) remainingMana: (((playerone hero) remainingMana) - 275)]."if other skilles are used, the effects will be given"((playerAttackChoice isMemberOf: WraithfireBlast) | (playerAttackChoice isMemberOf: Ravage) | (playerAttackChoice isMemberOf: StormHammer) | (playerAttackChoice isMemberOf: Fissure) | (playerAttackChoice isMemberOf: Impale) | (playerAttackChoice isMemberOf: Starstorm) | (playerAttackChoice isMemberOf: EarthSpike) | (playerAttackChoice isMemberOf: FingerofDeath) | (playerAttackChoice isMemberOf: SplitEarth) |(playerAttackChoice isMemberOf: FrostBite) | (playerAttackChoice isMemberOf: FreezingField))ifTrue: [	damage := playerAttackChoice damage.	(playerone hero) remainingMana: (((playerone hero) remainingMana) - (playerAttackChoice manaUsage))	]."damage is calculated after magic resistance effect"damage := (damage * ((100 - ((playertwo hero) magicResistance)) / 100))."damage is given to opponent"(playertwo hero) remainingHP: (((playertwo hero) remainingHP) - damage)."cooldown of skill that is used is reseted"(playerAttackChoice isKindOf: ((playerone hero) skill1 class))ifTrue: [(playerone hero) skill1 remainingCooldown: (playerone hero skill1 totalCooldown)]."cooldown of skill that is used is reseted"(playerAttackChoice isKindOf: ((playerone hero) skill2 class))ifTrue: [(playerone hero) skill2 remainingCooldown: (playerone hero skill2 totalCooldown)]."isAnchorSmash, isGodsStrength, isEnchantTotem, isManaBurn, isScretArrow,isMaginaUlty check et, isFireBlast,  player2 magicResistance var mı, damage yi uygula"! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:20'!activateRegen: playerone and: playertwo"updates health and mana regens of both player"(((playerone hero remainingMana) + (playerone hero regenMana)) < (playerone hero maxMana))ifTrue: [(playerone hero) remainingMana: ((playerone hero remainingMana) + (playerone hero regenMana)).]ifFalse: [(playerone hero) remainingMana: (playerone hero maxMana)].(((playertwo hero remainingMana) + (playertwo hero regenMana)) < (playertwo hero maxMana))ifTrue: [(playertwo hero) remainingMana: ((playertwo hero remainingMana) + (playertwo hero regenMana)).]ifFalse: [(playertwo hero) remainingMana: (playertwo hero maxMana)].(((playerone hero remainingHP) + ((playerone hero remainingHP) * (playerone hero regenHP) / 100)) < (playerone hero maxHP))ifTrue: [(playerone hero) remainingHP: ((playerone hero remainingHP) + ((playerone hero remainingHP) * (playerone hero regenHP) / 100)).]ifFalse: [(playerone hero) remainingHP: (playerone hero maxHP)].(((playertwo hero remainingHP) + ((playertwo hero remainingHP) * (playertwo hero regenHP) / 100)) < (playertwo hero maxHP))ifTrue: [(playertwo hero) remainingHP: ((playertwo hero remainingHP) + ((playertwo hero remainingHP) * (playertwo hero regenHP) / 100)).]ifFalse: [(playertwo hero) remainingHP: (playertwo hero maxHP)].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:47'!activateAttack: playerAttackChoice from: playerone to: playertwo"skill cooldowns and buff cooldowns are updated, and according to which option attacking player is selected, the game will take an action"GameArena reduceCoolDownOf: playerone.GameArena reduceBuffsOf: playerone.GameArena activateRegen: playerone and: playertwo.(((playerone hero) isMemberOf: Leshrac) & (playerone hero skill2 isPulseNova))ifTrue: [	(playerone hero) remainingMana: ((playerone hero remainingMana) - 150).	(playertwo hero) remainingHP: ((playertwo hero remainingHP) - (50 * ((100 - ((playertwo hero) magicResistance)) / 100))).	].(playerAttackChoice isMemberOf: Attack)ifTrue: [	playerone hero lastAction: 'Attack'.	GameArena basic: playerAttackChoice from: playerone to: playertwo.	].(playerAttackChoice isMemberOf: HealthPotion)ifTrue: [	playerone hero lastAction: 'Health Potion'. (playerone hero) remainingHP: (((playerone hero) remainingHP) + 300).].(playerAttackChoice isMemberOf: ManaPotion)ifTrue: [	playerone hero lastAction: 'Mana Potion'. (playerone hero) remainingMana: (((playerone hero) remainingMana) + 300).].	(playerAttackChoice isKindOf: Skill)ifTrue: [playerone hero lastAction: (playerAttackChoice skillName) .GameArena skill: playerAttackChoice from: playerone to: playertwo.].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:09'!print: player withName: playerName"prints the current game status in the following format;Player1Hero: Earthshaker570 / 2270 HP1125 / 1030 ManaLast Action: FissureRemaining Potions: 1 Health, 1 ManaSkills in Cooldown: Fissure (not available for 2 turns)"|list|list := LinkedList new.Transcript show: playerName ; cr; show: ('Hero: ', (player hero heroName)); cr.((player hero remainingHP asInteger) < 0)ifTrue: [Transcript show: ('0 / ', (player hero maxHP asString), ' HP'); cr.]ifFalse: [Transcript show: ((player hero remainingHP asInteger asString), ' / ', (player hero maxHP asString), ' HP'); cr.].Transcript show: ((player hero remainingMana asInteger asString), ' / ', (player hero maxMana asString), ' Mana'); cr.Transcript show: ('Last Action: ', player hero lastAction asString); cr.(((player hero remainingHPPotions) > 0) & ((player hero remainingManaPotions) > 0))ifTrue: [Transcript show: ('Remaining Potions: ', (player hero remainingHPPotions asString) , ' Health, ', (player hero remainingManaPotions asString), ' Mana'); cr.]ifFalse: [	((player hero remainingHPPotions) > 0)	ifTrue: [Transcript show: ('Remaining Potions: ', (player hero remainingHPPotions asString), ' Health'); cr.].	((player hero remainingManaPotions) > 0)	ifTrue: [Transcript show: 'Remaining Potions: ', (player hero remainingHPPotions asString), ' Mana'; cr.].	].(((player hero remainingHPPotions) = 0) & ((player hero remainingManaPotions) = 0))ifTrue: [Transcript show: ('Remaining Potions: None'); cr.].((player hero skill1 remainingCooldown) ~= 0)ifTrue: [list add: (player hero skill1 asString)].((player hero skill2 remainingCooldown) ~= 0)ifTrue: [list add: (player hero skill2 asString)].(list isEmpty)ifFalse: [Transcript show: ('Skills in cooldown: ', (list asString)).]ifTrue: [Transcript show: ('Skills in cooldown: None')].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:19'!basic: playerAttackChoice from: playerone to: playertwo|evas damage actualDamage tempArmor|	tempArmor := ((playertwo hero) armor).actualDamage := 0.evas := 0.	"evasion chance"evas := ((playertwo hero) evasion).((playertwo hero) isMemberOf: Mortred)ifTrue: [evas := evas + 40]."will be miss"(((0 to: 100) atRandom) > evas)ifTrue: [		damage := ((playerone hero damageLower) to: (playerone hero damageUpper)) atRandom.		"if the attacking player is magina, opponent's mana will be decreased"	((playerone hero) isMemberOf: Magina)	ifTrue: [		((playertwo hero remainingMana) > 100)		ifTrue: [	(playertwo hero) remainingMana: ((playertwo hero remainingMana) - 100)]		ifFalse: [(playertwo hero) remainingMana: 0].	].		"the critic chance is calculated"	(((0 to: 100) atRandom) < (playerone hero criticChance))	ifTrue:[damage := (damage * 2)].		"if the player has AnchorSmash effect, the damage will be decreased"	((playerone hero allBuffs) includesKey: 'AnchorSmash')	ifTrue: [damage := ((damage / 10) * 4).].		"if the player has GodsStrength effect, the damage will be increased"	((playerone hero allBuffs) includesKey: 'GodsStrength')	ifTrue: [damage := (damage * 2).].		"if the player has EnchantTotem effect, the damage will be increased"	((playerone hero allBuffs) includesKey: 'EnchantTotem')	ifTrue: [damage := (damage * 4).].		"if attacking gero is Mortred, the damage will be increased"	((playerone hero) isMemberOf: Mortred)	ifTrue: [ (((0 to: 100) atRandom) < 15) ifTrue: [damage := (damage * 4)]. ].			"if the player has desolator, the armor of playertwo will be decreased"	(playertwo hero decreaseEnemyArmor)	ifTrue: [tempArmor := (tempArmor - 5)].		"actual damage is calculated after armor effect"	actualDamage := damage * (1 - ((0.06 * ((playertwo hero) armor)) / (1 + (0.06 * ((playertwo hero) armor))))).		"if the attacking hero is SkeletonKing, it will have some lifesteal"	((playerone hero) isMemberOf: SkeletonKing)	ifTrue: [playerone hero remainingHP: ((playerone hero remainingHP) + (actualDamage * 15 / 100)) ].		"if the playertwo has vanguard, the damage taken will be decreased"	(((0 to: 100) atRandom) < (playertwo hero decreaseReceivedDamage))	ifTrue:[actualDamage := (actualDamage - 60)].		"the damage is applied to opponent"	playertwo hero remainingHP: ((playertwo hero remainingHP) - actualDamage).		].	! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:56'!start|playerone playertwo playeroneAttackChoice playertwoAttackChoice|playerone := Player createInstance: 'Player 1'. "first player that will play"playertwo := Player createInstance: 'Player 2'. "second player that will play"GameArena selectHero: playerone otherPlayer: playertwo. "players will chose a hero"GameArena buyItemfor: playerone in: 'Player1'. "player 1 will buy item"GameArena buyItemfor: playertwo in: 'Player2'. "player 2 will buy item"GameArena activateItemsFor: playerone. "Item's of player 1 effects will be given to heros"GameArena activateItemsFor: playertwo. "Item's of player 2 effects will be given to heros"Transcript open; clear."Main loop that the game will be player. This loop will run until one of the players's HP will be 0 or lower"[(((playerone hero) remainingHP) > 0) & (((playertwo hero) remainingHP) > 0)]whileTrue: [ 		"Creates required log before Player 1's turn in transcript to monitor the processes in the game"		GameArena createLogIn: 'Player1''s turn!!' for: playerone and: playertwo when: false.		"Player 1 chooses which action will he take" 		playeroneAttackChoice := GameArena sellectAttackChoice: playerone in: 'Player 1' when: false.				(playeroneAttackChoice isMemberOf: PulseNova)		ifTrue: [			playerone hero skill2 isPulseNova			ifTrue: [	playerone hero skill2 isPulseNova: false]			ifFalse: [playerone hero skill2 isPulseNova: true].			playeroneAttackChoice := GameArena sellectAttackChoice: playerone in: 'Player 1' when: true.		].						"The effect of the attack of player 1 will be seen in player 2"		GameArena activateAttack: playeroneAttackChoice from: playerone to: playertwo.		"if the game ended, creates end of the game log"		GameArena createLogIn: 'The end of the game' for: playerone and: playertwo when: true.		((((playerone hero) remainingHP) > 0) & (((playertwo hero) remainingHP) > 0))		ifTrue: [			"Creates required log before Player 2's turn in transcript to monitor the processes in the game"			GameArena createLogIn: 'Player2''s turn!!' for: playerone and: playertwo when: false.			"Player 2 chooses which action will he take" 			playertwoAttackChoice := GameArena sellectAttackChoice: playertwo in: 'Player 2' when: false.			"The effect of the attack of player 2 will be seen in player 1"			GameArena activateAttack: playertwoAttackChoice from: playertwo to: playerone.			"if the game ended, creates end of the game log"			GameArena createLogIn: 'The end of the game' for: playerone and: playertwo when: true.			].	].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:39'!sellectAttackChoice: player in: turn when: bool|choice attackList|attackList := LinkedList new.attackList add: player hero attack class."if player has health potion, it will be added to the list of items that will be shown to player"((player hero) remainingHPPotions > 0)ifTrue:[attackList add: (HealthPotion).]."if player has mana potion, it will be added to the list of items that will be shown to player"((player hero) remainingManaPotions > 0)ifTrue:[attackList add: (ManaPotion).]."if player's first skill is eligable, it will be added to the list of items that will be shown to player"((((player hero) remainingMana) > ((player hero skill1 manaUsage))) & ((player hero skill1 remainingCooldown) == 0))ifTrue: [	(player hero skill1 isPassive)	ifFalse: [attackList add: (player hero skill1 class).].	].boolifFalse: [	"if player's second skill is eligable, it will be added to the list of items that will be shown to player"	((((player hero) remainingMana) > ((player hero skill2 manaUsage))) & ((player hero skill2 remainingCooldown) == 0))	ifTrue: [		((player hero skill2 isPassive))		ifFalse: [attackList add: (player hero skill2 class).].		].]."player will chose an attack"choice := UIManager default chooseFrom: attackList message: 'Choose a hero attack from attacklist for ', turn.^((attackList at: choice) createInstance)! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:14'!buyItemfor: player in: turn|choice tempItemList items selectedItem forItem|choice := 1.items := Item subclasses.tempItemList := LinkedList withAll: items."the loop will turn until the itemslots of player are all full, or the player clicks cancel and decides not to buy any more item"[(tempItemList size ~= 0) & (choice ~= 0)]whileTrue:[				"item selection from item list"			choice := UIManager default chooseFrom: tempItemList message: 'Choose an item for ', turn, ' (Remaining item slot: ', 			(4 - ((player hero) 	fullSlotNumber) - ((((player hero) remainingHPPotions) / 2) ceiling) - 			((((player hero) remainingManaPotions) / 2) ceiling)) asString , ', Remaining gold: ', player remainingGold asString.					(choice ~= 0)			ifTrue: [					"some updates to keep track of item selection"					selectedItem := (tempItemList at: choice) createInstance.					player remainingGold: player remainingGold - selectedItem cost.							(selectedItem isMemberOf: ManaPotion) | (selectedItem isMemberOf: HealthPotion)					ifFalse: [						(player hero) fullSlotNumber: (((player hero) fullSlotNumber) + 1).						(player hero) itemList add: selectedItem.						]					ifTrue:[						(selectedItem isMemberOf: ManaPotion)						ifTrue: [(player hero) remainingManaPotions: (((player hero) remainingManaPotions) + 1)]						ifFalse: [(player hero) remainingHPPotions: (((player hero) remainingHPPotions) + 1)].						].							"reduce the shown list so that the player can not buy something inappropriate"					tempItemList := LinkedList withAll: items.					1 to: items size do:[ :x |						forItem := (items at: x) createInstance.							((forItem cost) > (player remainingGold)) 						ifTrue: [tempItemList remove: (items at: x)] "if the cost of item is more than the remaining gold of player, it will not be shown in the item list"						ifFalse: [							(forItem isMemberOf: ManaPotion) "some checks in keep track of how many items does the player has"							ifTrue: [																((((player hero) fullSlotNumber) + ((((player hero) remainingHPPotions) / 2) ceiling) +								((((player hero) remainingManaPotions) / 2) ceiling))=4) & ((((player hero) remainingManaPotions) % 2) = 1)								ifFalse: [									((((player hero) fullSlotNumber) + ((((player hero) remainingHPPotions) / 2) ceiling) +									((((player hero) remainingManaPotions) / 2) ceiling))<4)									ifFalse: [tempItemList remove: (items at: x)].]									].															(forItem isMemberOf: HealthPotion) "some checks in keep track of how many items does the player has"							ifTrue: [																((((player hero) fullSlotNumber) + ((((player hero) remainingHPPotions) / 2) ceiling) +								((((player hero) remainingManaPotions) / 2) ceiling))=4) & ((((player hero) remainingHPPotions) % 2) = 1)								ifFalse: [									((((player hero) fullSlotNumber) + ((((player hero) remainingHPPotions) / 2) ceiling) +									((((player hero) remainingManaPotions) / 2) ceiling))<4)									ifFalse: [tempItemList remove: (items at: x)].]									].																(forItem isMemberOf: ManaPotion) | (forItem isMemberOf: HealthPotion) "some checks in keep track of how many items does the player has"													ifFalse: [								((((player hero) fullSlotNumber) + ((((player hero) remainingHPPotions) / 2) ceiling) +								((((player hero) remainingManaPotions) / 2) ceiling))<3.5)								ifFalse: [tempItemList remove: (items at: x)].].							].						].						].			]! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:10'!createLogIn: turn for: playerone and: playertwo when: endOfTheGame"creates log to keep track of the game, if the game is over, the log will be change and there will be writen the name of the winner"endOfTheGameifTrue: [	((((playerone hero) remainingHP) < 0) | (((playertwo hero) remainingHP) < 0))	ifTrue: [		Transcript cr; cr; show: 'The end of the game'; cr; cr.		GameArena print: playerone withName: 'Player1'.		Transcript cr ; cr.		GameArena print: playertwo withName: 'Player2'.		(((playerone hero) remainingHP) < 0)		ifTrue: [Transcript cr ; cr; show: ('Player2 (', (playertwo hero heroName), ') is the winner of the game')]		ifFalse: [Transcript cr ; cr; show: ('Player1 (', (playerone hero heroName), ') is the winner of the game')].		]	]ifFalse: [	Transcript cr; cr; show: turn; cr ; cr.	GameArena print: playerone withName: 'Player1'.	Transcript cr ; cr.	GameArena print: playertwo withName: 'Player2'.	].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:07'!reduceCoolDownOf: player"reduces the cooldowns of skills of player"((player hero skill1 remainingCooldown) ~= 0)ifTrue: [(player hero) skill1 remainingCooldown: (((player hero) skill1 remainingCooldown) - 1)].((player hero skill2 remainingCooldown) ~= 0)ifTrue: [(player hero) skill2 remainingCooldown: (((player hero) skill2 remainingCooldown) - 1)].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:07'!reduceBuffsOf: playerone"reduces the cooldowns of buffs of player"playerone hero allBuffs keysAndValuesDo: [:aKey :aValue |	playerone hero allBuffs removeKey: aKey.	(aValue = 1)	ifFalse:[	playerone hero allBuffs add: aKey -> (aValue - 1).].	].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 23:21'!activateItemsFor: player"applies effect of items to heros, if an effect has a certain probability, it will decrease every time an item is bought"|itlist|itlist := player hero itemList.1 to: (itlist capacity) do:[ :x|		(player hero) damageLower: (((player hero) damageLower) + ((itlist at: x) isDamage)). 		(player hero) damageUpper: (((player hero) damageUpper) + ((itlist at: x) isDamage)).		(player hero) regenMana:  (((player hero) regenMana) + ((itlist at: x) isManaRegen)).				((itlist at: x) isHPRegen > 0)		ifTrue: [			(((player hero regenHP) = 0))			ifTrue: [(player hero) regenHP: (((player hero) regenHP) + ((itlist at: x) isHPRegen)).]			ifFalse: [				((player hero regenHP) = 7) ifTrue: [(player hero) regenHP: 10]				ifFalse:[					((player hero regenHP) = 10) ifTrue: [(player hero) regenHP: 12]					ifFalse:[						((player hero regenHP) = 12) ifTrue: [(player hero) regenHP: 13].							]					]				].			].				(player hero) regenHP: (((player hero) regenHP) + ((itlist at: x) isHPRegen)).		((itlist at: x) isMagicResistance > 0)		ifTrue: [			(((player hero magicResistance) = 0))			ifTrue: [(player hero) magicResistance: (((player hero) magicResistance) + ((itlist at: x) isMagicResistance)).]			ifFalse: [				((player hero magicResistance) = 25) ifTrue: [(player hero) magicResistance: 37]				ifFalse:[					((player hero magicResistance) = 37) ifTrue: [(player hero) magicResistance: 45]					ifFalse:[						((player hero magicResistance) = 45) ifTrue: [(player hero) magicResistance: 51].							]					]				].			].				(player hero) maxHP: (((player hero) maxHP) + ((itlist at: x) isHP)).		(player hero) remainingHP:  (((player hero) remainingHP) + ((itlist at: x) isHP)).		(player hero) maxMana: (((player hero) maxMana) + ((itlist at: x) isMana)).		(player hero) remainingMana: (((player hero) remainingMana) + ((itlist at: x) isMana)).				((itlist at: x) isEvasion > 0)		ifTrue: [			(((player hero evasion) = 0))			ifTrue: [(player hero) evasion: (((player hero) evasion) + ((itlist at: x) isEvasion)).]			ifFalse: [				((player hero evasion) = 25) ifTrue: [(player hero) evasion: 37]				ifFalse:[					((player hero evasion) = 37) ifTrue: [(player hero) evasion: 45]					ifFalse:[						((player hero evasion) = 45) ifTrue: [(player hero) evasion: 51].							]					]				].			].				((itlist at: x) isCriticChance > 0)		ifTrue: [			(((player hero criticChance) = 0))			ifTrue: [(player hero) criticChance: (((player hero) criticChance) + ((itlist at: x) isCriticChance)).]			ifFalse: [				((player hero criticChance) = 25) ifTrue: [(player hero) criticChance: 37]				ifFalse:[					((player hero criticChance) = 37) ifTrue: [(player hero) criticChance: 45]					ifFalse:[						((player hero criticChance) = 45) ifTrue: [(player hero) criticChance: 51].							]					]				].			].				(player hero) decreaseEnemyArmor: ((itlist at: x) isDecreaseArmor).				((itlist at: x) isDecreaseReceivedDamage > 0)		ifTrue: [			(((player hero decreaseReceivedDamage) = 0))			ifTrue: [(player hero) decreaseReceivedDamage: (((player hero) criticChance) + ((itlist at: x) isDecreaseReceivedDamage)).]			ifFalse: [				((player hero decreaseReceivedDamage) = 20) ifTrue: [(player hero) decreaseReceivedDamage: 30]				ifFalse:[					((player hero decreaseReceivedDamage) = 30) ifTrue: [(player hero) decreaseReceivedDamage: 37]					ifFalse:[						((player hero decreaseReceivedDamage) = 37) ifTrue: [(player hero) decreaseReceivedDamage: 43].							]					]				].			].			].! !Dota subclass: #Hero	instanceVariableNames: 'fullSlotNumber LastAction remainingHPPotions remainingManaPotions itemList maxHP remainingHP evasion armor damageUpper damageLower maxMana remainingMana heroName criticChance regenMana regenHP skill1 skill2 attack allBuffs magicResistance potionMana potionHP decreaseEnemyArmor decreaseReceivedDamage lifeSteal'	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Hero commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!potionMana	^ potionMana! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!lastAction: anObject	LastAction := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!remainingHP: anObject	remainingHP := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!remainingHPPotions	^ remainingHPPotions! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!remainingHP	^ remainingHP! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!regenHP	^ regenHP! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!criticChance: anObject	criticChance := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!maxHP	^ maxHP! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!armor	^ armor! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!regenHP: anObject	regenHP := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!damageUpper: anObject	damageUpper := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!remainingMana: anObject	remainingMana := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/11/2017 19:14'!decreaseEnemyArmor	^ decreaseEnemyArmor! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!regenMana	^ regenMana! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!magicResistance: anObject	magicResistance := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!allBuffs: anObject	allBuffs := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!potionMana: anObject	potionMana := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!buffsInCd	^ buffsInCd! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!damageUpper	^ damageUpper! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/11/2017 19:14'!decreaseEnemyArmor: anObject	decreaseEnemyArmor := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!side: anObject	side := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!remainingHPPotions: anObject	remainingHPPotions := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!maxHP: anObject	maxHP := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!criticChance	^ criticChance! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!evasion: anObject	evasion := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/11/2017 19:14'!decreaseReceivedDamage	^ decreaseReceivedDamage! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/11/2017 19:14'!decreaseReceivedDamage: anObject	decreaseReceivedDamage := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!remainingManaPotions: anObject	remainingManaPotions := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!side	^ side! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!buffsInCd: anObject	buffsInCd := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!evasion	^ evasion! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!maxMana: anObject	maxMana := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!allBuffs	^ allBuffs! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!skill2: anObject	skill2 := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!heroName	^ heroName! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 17:13'!attack: anObject	attack := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!skill2	^ skill2! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!fullSlotNumber: anObject	fullSlotNumber := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!lastAction	^ LastAction! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!fullSlotNumber	^ fullSlotNumber! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!skill1	^ skill1! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!potionHP: anObject	potionHP := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!potionHP	^ potionHP! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!remainingMana	^ remainingMana! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!regenMana: anObject	regenMana := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:09'!lifeSteal	^ lifeSteal! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!heroName: anObject	heroName := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!skill1: anObject	skill1 := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!magicResistance	^ magicResistance! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!armor: anObject	armor := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!itemList: anObject	itemList := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!damageLower: anObject	damageLower := anObject! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!itemList	^ itemList! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:23'!remainingManaPotions	^ remainingManaPotions! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!maxMana	^ maxMana! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 18:09'!lifeSteal: anObject	lifeSteal := anObject! !!Hero methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 12:33'!damageLower	^ damageLower! !!Hero methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 17:13'!attack	^ attack! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hero class	instanceVariableNames: ''!!Hero class methodsFor: 'as yet unclassified' stamp: 'SadullahGultekin 5/9/2017 12:22'!createInstance^self subclassResponsibility.! !Dota subclass: #Item	instanceVariableNames: 'itemName cost isDamage isManaRegen isHPRegen isMagicResistance isHP isMana isEvasion isCriticChance isDecreaseArmor isDecreaseReceivedDamage slotSize'	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Item commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isDecreaseReceivedDamage	^ isDecreaseReceivedDamage! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isHPRegen: anObject	isHPRegen := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isMana: anObject	isMana := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isCriticChance	^ isCriticChance! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!cost	^ cost! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isManaRegen: anObject	isManaRegen := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isDecreaseArmor: anObject	isDecreaseArmor := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isDecreaseArmor	^ isDecreaseArmor! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isHP	^ isHP! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!cost: anObject	cost := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isDamage	^ isDamage! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 18:07'!slotSize	^ slotSize! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isDamage: anObject	isDamage := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isMagicResistance: anObject	isMagicResistance := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isHP: anObject	isHP := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isHPRegen	^ isHPRegen! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isManaRegen	^ isManaRegen! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isEvasion	^ isEvasion! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!itemName	^ itemName! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isMagicResistance	^ isMagicResistance! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isCriticChance: anObject	isCriticChance := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 18:07'!slotSize: anObject	slotSize := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isMana	^ isMana! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isDecreaseReceivedDamage: anObject	isDecreaseReceivedDamage := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!isEvasion: anObject	isEvasion := anObject! !!Item methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:37'!itemName: anObject	itemName := anObject! !Item subclass: #BattleFury	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!BattleFury commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BattleFury class	instanceVariableNames: ''!!BattleFury class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'BattleFury'.tempObject cost: 4500.tempObject isDamage: 55.tempObject isManaRegen: 50.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 0.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #Butterfly	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Butterfly commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Butterfly class	instanceVariableNames: ''!!Butterfly class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'Butterfly'.tempObject cost: 5500.tempObject isDamage: 30.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 0.tempObject isMana: 0.tempObject isEvasion: 25.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #Daedalus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Daedalus commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Daedalus class	instanceVariableNames: ''!!Daedalus class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'Daedalus'.tempObject cost: 5500.tempObject isDamage: 75.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 0.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 25.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #Desolator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Desolator commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Desolator class	instanceVariableNames: ''!!Desolator class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'Desolator'.tempObject cost: 4000.tempObject isDamage: 50.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 0.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: true.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #EnergyBooster	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!EnergyBooster commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnergyBooster class	instanceVariableNames: ''!!EnergyBooster class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'EnergyBooster'.tempObject cost: 1100.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 0.tempObject isMana: 250.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #HealthPotion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!HealthPotion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HealthPotion class	instanceVariableNames: ''!!HealthPotion class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'HealthPotion'.tempObject cost: 200.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 300.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 0.5.^tempObject.! !Item subclass: #HeartofTarrasque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!HeartofTarrasque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeartofTarrasque class	instanceVariableNames: ''!!HeartofTarrasque class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'HeartofTarrasque'.tempObject cost: 5600.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 7.tempObject isMagicResistance: 0.tempObject isHP: 250.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #HoodofDefiance	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!HoodofDefiance commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HoodofDefiance class	instanceVariableNames: ''!!HoodofDefiance class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'HoodofDefiance'.tempObject cost: 2000.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 25.tempObject isHP: 0.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Item subclass: #ManaPotion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!ManaPotion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaPotion class	instanceVariableNames: ''!!ManaPotion class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'ManaPotion'.tempObject cost: 200.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 0.tempObject isMana: 300.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 0.5.^tempObject.! !Dota subclass: #Player	instanceVariableNames: 'remainingGold hero playerName'	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Player commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hero:		<Object>	remainingGold:		<Object>    Implementation Points!!Player methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:06'!remainingManaPotions	^ remainingManaPotions! !!Player methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:06'!remainingManaPotions: anObject	remainingManaPotions := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!fullSlotNumber	^ fullSlotNumber! !!Player methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/20/2017 21:55'!playerName	^ playerName! !!Player methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:22'!itemList: anObject	itemList := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:22'!itemList	^ itemList! !!Player methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:06'!remainingHPPotions: anObject	remainingHPPotions := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!remainingGold: anObject	remainingGold := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!hero	^ hero! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!hero: anObject	hero := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!remainingGold	^ remainingGold! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!lastAction	^ LastAction! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!fullSlotNumber: anObject	fullSlotNumber := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGultekin 5/9/2017 13:06'!remainingHPPotions	^ remainingHPPotions! !!Player methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/20/2017 21:55'!playerName: anObject	playerName := anObject! !!Player methodsFor: 'accessing' stamp: 'SadullahGltekin 4/28/2017 19:39'!lastAction: anObject	LastAction := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Player class	instanceVariableNames: ''!!Player class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/20/2017 21:56'!createInstance: pname|tempObject|tempObject := self basicNew.tempObject remainingGold: 11000.tempObject playerName: pname.^tempObject.! !!Player class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 18:28'!createInstance|tempObject|tempObject := self basicNew.tempObject remainingGold: 11000.^tempObject.! !Hero subclass: #Scourge	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Scourge commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Scourge subclass: #Leshrac	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Leshrac commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Leshrac class	instanceVariableNames: ''!!Leshrac class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:20'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Leshrac'.tempObject side: 'Scourge'.tempObject maxHP: 1518.tempObject remainingHP: 1518.tempObject regenHP: 0.tempObject maxMana: 1534.tempObject remainingMana: 1534. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 12.tempObject magicResistance: 0.tempObject damageLower: 133.tempObject damageUpper: 137.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: SplitEarth createInstance.tempObject skill2: PulseNova createInstance.tempObject attack: Attack createInstance.^tempObject.! !Scourge subclass: #Lion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Lion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Lion class	instanceVariableNames: ''!!Lion class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:20'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Lion'.tempObject side: 'Scourge'.tempObject maxHP: 1609.tempObject remainingHP: 1609.tempObject regenHP: 0.tempObject maxMana: 1456.tempObject remainingMana: 1456. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 9.tempObject magicResistance: 0.tempObject damageLower: 139.tempObject damageUpper: 145.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: EarthSpike createInstance.tempObject skill2: FingerofDeath createInstance.tempObject attack: Attack createInstance.^tempObject.! !Scourge subclass: #Mortred	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Mortred commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mortred class	instanceVariableNames: ''!!Mortred class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:20'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Mortred'.tempObject side: 'Scourge'.tempObject maxHP: 1754.tempObject remainingHP: 1754.tempObject regenHP: 0.tempObject maxMana: 892.tempObject remainingMana: 892. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 18.tempObject magicResistance: 0.tempObject damageLower: 142.tempObject damageUpper: 144.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: Blur createInstance.tempObject skill2: CoupdeGrace createInstance.tempObject attack: Attack createInstance.^tempObject.! !Scourge subclass: #NyxAssasin	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!NyxAssasin commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NyxAssasin class	instanceVariableNames: ''!!NyxAssasin class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:20'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'NyxAssasin'.tempObject side: 'Scourge'.tempObject maxHP: 1784.tempObject remainingHP: 1784.tempObject regenHP: 0.tempObject maxMana: 1149.tempObject remainingMana: 1149. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 14.tempObject magicResistance: 0.tempObject damageLower: 122.tempObject damageUpper: 126.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: Impale createInstance.tempObject skill2: ManaBurn createInstance.tempObject attack: Attack createInstance.^tempObject.! !Hero subclass: #Sentinel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Sentinel commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Sentinel subclass: #Earthshaker	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Earthshaker commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Earthshaker class	instanceVariableNames: ''!!Earthshaker class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:21'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Earthshaker'.tempObject side: 'Sentinel'.tempObject maxHP: 2270.tempObject remainingHP: 2270.tempObject regenHP: 0.tempObject maxMana: 1030.tempObject remainingMana: 1030. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 10.tempObject magicResistance: 0.tempObject damageLower: 136.tempObject damageUpper: 146.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: Fissure createInstance.tempObject skill2: EnchantTotem createInstance.tempObject attack: Attack createInstance.^tempObject.! !Sentinel subclass: #Magina	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Magina commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Magina class	instanceVariableNames: ''!!Magina class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:21'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Magina'.tempObject side: 'Sentinel'.tempObject maxHP: 1495.tempObject remainingHP: 1495.tempObject regenHP: 0.tempObject maxMana: 1017.tempObject remainingMana: 1017. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 14.tempObject magicResistance: 0.tempObject damageLower: 136.tempObject damageUpper: 140.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: ManaBreak createInstance.tempObject skill2: ManaVoid createInstance.tempObject attack: Attack createInstance.^tempObject.! !Sentinel subclass: #Mirana	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Mirana commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mirana class	instanceVariableNames: ''!!Mirana class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:21'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Mirana'.tempObject side: 'Sentinel'.tempObject maxHP: 1697.tempObject remainingHP: 1697.tempObject regenHP: 0.tempObject maxMana: 996.tempObject remainingMana: 996. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 16.tempObject magicResistance: 0.tempObject damageLower: 137.tempObject damageUpper: 148.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: Starstorm createInstance.tempObject skill2: SacredArrow createInstance.tempObject attack: Attack createInstance.^tempObject.! !Sentinel subclass: #OgreMagi	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!OgreMagi commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OgreMagi class	instanceVariableNames: ''!!OgreMagi class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:21'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'OgreMagi'.tempObject side: 'Sentinel'.tempObject maxHP: 2426.tempObject remainingHP: 2426.tempObject regenHP: 0.tempObject maxMana: 1105.tempObject remainingMana: 1105. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 16.tempObject magicResistance: 0.tempObject damageLower: 126.tempObject damageUpper: 132.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: FireBlast createInstance.tempObject skill2: MultiCast createInstance.tempObject attack: Attack createInstance.^tempObject.! !Sentinel subclass: #Rylai	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Rylai commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rylai class	instanceVariableNames: ''!!Rylai class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:21'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Rylai'.tempObject side: 'Sentinel'.tempObject maxHP: 1609.tempObject remainingHP: 1609.tempObject regenHP: 0.tempObject maxMana: 1373.tempObject remainingMana: 1373. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 9.tempObject magicResistance: 0.tempObject damageLower: 125.tempObject damageUpper: 131.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: FrostBite createInstance.tempObject skill2: FreezingField createInstance.tempObject attack: Attack createInstance.^tempObject.! !Scourge subclass: #SkeletonKing	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!SkeletonKing commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SkeletonKing class	instanceVariableNames: ''!!SkeletonKing class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 09:20'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'SkeletonKing'.tempObject side: 'Scourge'.tempObject maxHP: 2270.tempObject remainingHP: 2270.tempObject regenHP: 0.tempObject maxMana: 993.tempObject remainingMana: 993. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 11.tempObject magicResistance: 0.tempObject damageLower: 151.tempObject damageUpper: 153.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: WraithfireBlast createInstance.tempObject skill2: VampiricAura createInstance.tempObject attack: Attack createInstance.^tempObject.! !Dota subclass: #Skill	instanceVariableNames: 'skillName isPassive manaUsage totalCooldown remainingCooldown damage Heal decreaseEnemyAttack decreaseEnemyMana x2attackPower x3attackPower x4attackPower howManyTurnAvailable evasion isMaginaUlti isPulseNova isMultiCast'	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Skill commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!x3attackPower	^ x3attackPower! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!howManyTurnAvailable	^ howManyTurnAvailable! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isMaginaUlti: anObject	isMaginaUlti := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isPulseNova	^ isPulseNova! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!manaUsage: anObject	manaUsage := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!x3attackPower: anObject	x3attackPower := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!x2attackPower: anObject	x2attackPower := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isPulseNova: anObject	isPulseNova := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isMultiCast: anObject	isMultiCast := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!totalCooldown: anObject	totalCooldown := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!decreaseEnemyMana	^ decreaseEnemyMana! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isMaginaUlti	^ isMaginaUlti! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!howManyTurnAvailable: anObject	howManyTurnAvailable := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:11'!skillName	^ skillName! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!x4attackPower: anObject	x4attackPower := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!remainingCooldown	^ remainingCooldown! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!evasion	^ evasion! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!x4attackPower	^ x4attackPower! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!evasion: anObject	evasion := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!decreaseEnemyAttack: anObject	decreaseEnemyAttack := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isMultiCast	^ isMultiCast! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!manaUsage	^ manaUsage! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!heal	^ Heal! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!x2attackPower	^ x2attackPower! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:11'!skillName: anObject	skillName := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isPassive	^ isPassive! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!isPassive: anObject	isPassive := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!damage	^ damage! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!heal: anObject	Heal := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!damage: anObject	damage := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!decreaseEnemyAttack	^ decreaseEnemyAttack! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!decreaseEnemyMana: anObject	decreaseEnemyMana := anObject! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!totalCooldown	^ totalCooldown! !!Skill methodsFor: 'accessing' stamp: 'Sadullahgultekin 5/14/2017 13:02'!remainingCooldown: anObject	remainingCooldown := anObject! !Skill subclass: #AnchorSmash	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!AnchorSmash commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnchorSmash class	instanceVariableNames: ''!!AnchorSmash class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 00:55'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'AnchorSmash'.tempObject isPassive: false.tempObject manaUsage: 60.tempObject totalCooldown: 3.tempObject remainingCooldown: 0.tempObject damage: 225.tempObject decreaseEnemyAttack: 60.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 1.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #Attack	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Attack commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Attack class	instanceVariableNames: ''!!Attack class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 00:55'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'Attack'.tempObject isPassive: false.tempObject manaUsage: 0.tempObject totalCooldown: 0.tempObject remainingCooldown: 0.tempObject damage: 60.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #Blur	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Blur commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Blur class	instanceVariableNames: ''!!Blur class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:41'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'Blur'.tempObject isPassive: true.tempObject manaUsage: 60.tempObject totalCooldown: 0.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 40.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #CoupdeGrace	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!CoupdeGrace commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CoupdeGrace class	instanceVariableNames: ''!!CoupdeGrace class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:41'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'CoupdeGrace'.tempObject isPassive: true.tempObject manaUsage: 0.tempObject totalCooldown: 0.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: true.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #EarthSpike	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!EarthSpike commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EarthSpike class	instanceVariableNames: ''!!EarthSpike class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:42'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'EarthSpike'.tempObject isPassive: false.tempObject manaUsage: 160.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 260.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #EnchantTotem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!EnchantTotem commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnchantTotem class	instanceVariableNames: ''!!EnchantTotem class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:43'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'EnchantTotem'.tempObject isPassive: false.tempObject manaUsage: 50.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: true.tempObject howManyTurnAvailable: 1.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #FingerofDeath	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!FingerofDeath commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FingerofDeath class	instanceVariableNames: ''!!FingerofDeath class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:44'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'FingerofDeath'.tempObject isPassive: false.tempObject manaUsage: 650.tempObject totalCooldown: 8.tempObject remainingCooldown: 0.tempObject damage: 850.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #FireBlast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!FireBlast commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FireBlast class	instanceVariableNames: ''!!FireBlast class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/16/2017 11:56'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'FireBlast'.tempObject isPassive: false.tempObject manaUsage: 225.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 220.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #Fissure	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Fissure commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fissure class	instanceVariableNames: ''!!Fissure class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:45'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'Fissure'.tempObject isPassive: false.tempObject manaUsage: 170.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 260.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #FreezingField	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!FreezingField commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreezingField class	instanceVariableNames: ''!!FreezingField class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:46'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'FreezingField'.tempObject isPassive: false.tempObject manaUsage: 600.tempObject totalCooldown: 8.tempObject remainingCooldown: 0.tempObject damage: 800.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #FrostBite	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!FrostBite commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FrostBite class	instanceVariableNames: ''!!FrostBite class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:47'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'FrostBite'.tempObject isPassive: false.tempObject manaUsage: 150.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 300.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #GodsStrength	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!GodsStrength commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GodsStrength class	instanceVariableNames: ''!!GodsStrength class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 00:56'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'GodsStrength'.tempObject isPassive: false.tempObject manaUsage: 200.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 60.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: true.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 3.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #Impale	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Impale commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Impale class	instanceVariableNames: ''!!Impale class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:47'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'Impale'.tempObject isPassive: false.tempObject manaUsage: 225.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 260.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #ManaBreak	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!ManaBreak commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaBreak class	instanceVariableNames: ''!!ManaBreak class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:48'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'ManaBreak'.tempObject isPassive: true.tempObject manaUsage: 0.tempObject totalCooldown: 0.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 100.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #ManaBurn	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!ManaBurn commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaBurn class	instanceVariableNames: ''!!ManaBurn class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:49'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'ManaBurn'.tempObject isPassive: false.tempObject manaUsage: 50.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 20.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #ManaVoid	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!ManaVoid commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaVoid class	instanceVariableNames: ''!!ManaVoid class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:49'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'ManaVoid'.tempObject isPassive: false.tempObject manaUsage: 275.tempObject totalCooldown: 7.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: true.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #MultiCast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!MultiCast commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MultiCast class	instanceVariableNames: ''!!MultiCast class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:50'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'MultiCast'.tempObject isPassive: true.tempObject manaUsage: 0.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 0.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: true.^tempObject! !Skill subclass: #PulseNova	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!PulseNova commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PulseNova class	instanceVariableNames: ''!!PulseNova class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/16/2017 11:47'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'PulseNova'.tempObject isPassive: false.tempObject manaUsage: 150.tempObject totalCooldown: 0.tempObject remainingCooldown: 0.tempObject damage: 50.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #Ravage	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Ravage commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ravage class	instanceVariableNames: ''!!Ravage class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 00:56'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'Ravage'.tempObject isPassive: false.tempObject manaUsage: 325.tempObject totalCooldown: 8.tempObject remainingCooldown: 0.tempObject damage: 380.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #SacredArrow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!SacredArrow commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SacredArrow class	instanceVariableNames: ''!!SacredArrow class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:51'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'SacredArrow'.tempObject isPassive: false.tempObject manaUsage: 100.tempObject totalCooldown: 4.tempObject remainingCooldown: 0.tempObject damage: 320.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #SplitEarth	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!SplitEarth commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SplitEarth class	instanceVariableNames: ''!!SplitEarth class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:51'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'SplitEarth'.tempObject isPassive: false.tempObject manaUsage: 160.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 300.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #Starstorm	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Starstorm commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Starstorm class	instanceVariableNames: ''!!Starstorm class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:52'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'StarStorm'.tempObject isPassive: false.tempObject manaUsage: 160.tempObject totalCooldown: 4.tempObject remainingCooldown: 0.tempObject damage: 300.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Skill subclass: #StormHammer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!StormHammer commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StormHammer class	instanceVariableNames: ''!!StormHammer class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 00:56'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'StormHammer'.tempObject isPassive: false.tempObject manaUsage: 140.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 325.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Sentinel subclass: #Sven	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Sven commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sven class	instanceVariableNames: ''!!Sven class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 00:58'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'Sven'.tempObject side: 'Sentinel'.tempObject maxHP: 2198.tempObject remainingHP: 2198.tempObject regenHP: 0.tempObject maxMana: 874.tempObject remainingMana: 874. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 14.tempObject magicResistance: 0.tempObject damageLower: 149.tempObject damageUpper: 151.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: StormHammer createInstance.tempObject skill2: GodsStrength createInstance.tempObject attack: Attack createInstance.^tempObject.! !Scourge subclass: #Tidehunter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Tidehunter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tidehunter class	instanceVariableNames: ''!!Tidehunter class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:50'!createInstance|tempObject|tempObject := self basicNew.tempObject heroName: 'TideHunter'.tempObject side: 'Scourge'.tempObject maxHP: 2316.tempObject remainingHP: 2316.tempObject regenHP: 0.tempObject maxMana: 998.tempObject remainingMana: 998. tempObject regenMana: 0.tempObject criticChance: 0.tempObject decreaseEnemyArmor: false.tempObject decreaseReceivedDamage: 0.tempObject evasion: 0.tempObject armor: 11.tempObject magicResistance: 0.tempObject damageLower: 139.tempObject damageUpper: 145.tempObject allBuffs: Dictionary new.tempObject buffsInCd: ''.tempObject potionHP: 0.tempObject potionMana: 0.tempObject fullSlotNumber: 0.tempObject remainingHPPotions: 0.tempObject remainingManaPotions: 0.tempObject itemList: LinkedList new.tempObject skill1: AnchorSmash createInstance.tempObject skill2: Ravage createInstance.tempObject attack: Attack createInstance.^tempObject.! !Skill subclass: #VampiricAura	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!VampiricAura commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VampiricAura class	instanceVariableNames: ''!!VampiricAura class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:52'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'VampiricAura'.tempObject isPassive: true.tempObject manaUsage: 160.tempObject totalCooldown: 0.tempObject remainingCooldown: 0.tempObject damage: 260.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !Item subclass: #Vanguard	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!Vanguard commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vanguard class	instanceVariableNames: ''!!Vanguard class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:52'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'Vanguard'.tempObject cost: 2500.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 250.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 20.tempObject slotSize: 1.^tempObject.! !Item subclass: #VitalityBooster	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!VitalityBooster commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VitalityBooster class	instanceVariableNames: ''!!VitalityBooster class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/14/2017 19:53'!createInstance|tempObject|tempObject := self basicNew.tempObject itemName: 'VitalityBooster'.tempObject cost: 1200.tempObject isDamage: 0.tempObject isManaRegen: 0.tempObject isHPRegen: 0.tempObject isMagicResistance: 0.tempObject isHP: 250.tempObject isMana: 0.tempObject isEvasion: 0.tempObject isCriticChance: 0.tempObject isDecreaseArmor: false.tempObject isDecreaseReceivedDamage: 0.tempObject slotSize: 1.^tempObject.! !Skill subclass: #WraithfireBlast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400066'!!WraithfireBlast commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WraithfireBlast class	instanceVariableNames: ''!!WraithfireBlast class methodsFor: 'as yet unclassified' stamp: 'Sadullahgultekin 5/15/2017 01:53'!createInstance|tempObject|tempObject := self basicNew.tempObject skillName: 'WraithfireBlast'.tempObject isPassive: false.tempObject manaUsage: 140.tempObject totalCooldown: 5.tempObject remainingCooldown: 0.tempObject damage: 300.tempObject decreaseEnemyAttack: 0.tempObject decreaseEnemyMana: 0.tempObject x2attackPower: false.tempObject x3attackPower: false.tempObject x4attackPower: false.tempObject howManyTurnAvailable: 0.tempObject evasion: 0.tempObject isMaginaUlti: false.tempObject isPulseNova: false.tempObject isMultiCast: false.^tempObject! !